#!/usr/bin/env perl
#
# vim: set tabstop=4:
#
my $AB = `tput md`;
my $AO = `tput me`;
my $UL = `tput us`;
my $CR = `tput AF 1`;
my $CG = `tput AF 2`;
my $CY = `tput AF 3`;
my $CB = `tput AF 4`;
my $CM = `tput AF 5`;
my $CC = `tput AF 6`;
my $CW = `tput AF 7`;
my $CL = `tput clear`;

my $ttyw;
my $ttyh;
my $currecord;
my $tgtrecord;
my $curflist;
my $tgtflist;
my $tgtversion	 = -1;
my $curversion	 = -1;
my $version_file = qq(/VERSION);
my $base_url	 = qq(http://nomadbsd.org/download/updates);
my $index_file	 = qq(nomadbsd-patch.index);
my $wrkdir		 = qq(/tmp/nomadbsd-update.$$);
my $filelist	 = qq(/var/db/nomadbsd-update.files);
my $oldfiles	 = qq(/var/db/nomadbsd-update.oldfiles);
my $prepdir	  	 = qq(${wrkdir}/prep);
my $backup_file	 = qq(/var/backups/nomadbsd-backup.tar);

chomp($ttyw = `stty size | cut -d' ' -f2`);
chomp($ttyh = `stty size | cut -d' ' -f1`);

sub shorten_line {
	my ($line, $maxlen) = @_;

	if (length($line) > $maxlen - 1) {
		$maxlen -= 4;
		return substr($line, 0, $maxlen) . "...";
	}
	return $line;
}

sub md5_checksum {
	my $output = `md5 $_[0]`;
	$output =~ s/.*=\s*([a-zA-Z0-9]+)$/$1/;
	chomp($output);

	return $output;
}

sub shorten_fname {
	my $maxlen = $_[1];
	my @a  = split('/', $_[0]);
	my $n  = @a - 1 < 0 ? 0 : @a - 1;
	my $tl = length($_[0]);
	my $fl = length($a[$n]);

	if ($fl >= $maxlen) {
		return ('...' . substr($_[0], 0, $maxlen - 4));
	} elsif ($tl > $maxlen) {
		my $s = substr($_[0], 0, $maxlen - $fl - 4) .
				'...' . ($n > 0 ? '/' : '') . $a[$n];
		return $s;
	}
	return $_[0];
}

sub get_last_line {
	my ($fh, $lc, @lines);

	open($fh, '<', $_[0]) ||
		errx(1, "Failed to open ``$_[0]´´: $!");
	@lines = <$fh>; close($fh);
	for ($lc = @lines - 1; $lc >= 0; $lc--) {
		chomp($lines[$lc]);
		return $lines[$lc] if ($lines[$lc]);
	}
}

sub get_cur_version {
	my ($fh, $lc, $version, @lines);

	if (! -f $version_file) {
		errx(1, "No version file found. If you are running NomadBSD 1.0 " .
				"issue ``nomadbsd-upgrade init´´ first.")
	}
	if (!($version = get_last_line($version_file))) {
		errx(1, "Version not defined in ``$version_file´´");
	}
	return $version;
}

sub get_target_version {
	my $r;
	
	if (!($r = get_last_line("$wrkdir/$index_file"))) {
		errx(1, "``$index_file´´ seems to be empty");
	}
	foreach (split(/:/, $r)) {
		return $1 if (/version=([^:]+)(:|$)/);
	}
}

sub get_version_record {
	my $fh;
	my ($version) = @_;

	open($fh, '<', "$wrkdir/$index_file") ||
		errx(1, "Failed to open ``$wrkdir/$index_file´´: $!");
	foreach $r (<$fh>) {
		if ($r =~ /version=$version(:|$)/) {
			close($fh);
			return $r;
		}
	}
	close($fh);
}

sub get_field {
	my ($record, $field) = @_;

	chomp($record);	
	foreach (split(/:/, $record)) {
		return $1 if (/$field=([^:]*)(:|$)/);
	}
}

sub fetch_file {
	my ($url, $file) = @_;

	if (! -d ${wrkdir}) {
		mkdir(${wrkdir})
			or errx(1, "Failed to create ${wrkdir}");
	}
	printf("${AB}\r%s", "Fetching $file ... ${AO}");
	system(qq(fetch -o "${wrkdir}/${file}" "${url}/${file}" 2>/dev/null)) == 0
		or errx(1, "Failed to fetch $file");
	print "${AB}${CG}OK${AO}\n";
}

sub fetch_index {
	return if (-f qq(${wrkdir}/${index_file}));
	fetch_file($base_url, $index_file);
}

sub fetch_archive {
	my $chksum;

	fetch_file($base_url, $_[0]);
	$chksum = `sha256 $wrkdir/$_[0]`;
	$chksum =~ s/.*=\s*([a-zA-Z0-9]+)$/$1/;
	chomp($chksum);

	if ($chksum ne get_field($tgtrecord, 'archivecs')) {
		errx(1, "Checksum of patch archive does not match");
	}
	mkdir(${prepdir})
		or errx(1, "Failed to create ${prepdir}");
	printf("${AB}\r%s", "Extracting $_[0] ... ${AO}");
	system("cd ${prepdir} && tar xf ${wrkdir}/$_[0]") == 0
		or errx(1, "Failed to extract patch archive to ${prepdir}");
	print "${AB}${CG}OK${AO}\n";
	# Execute the new update script from the archive if available.
	if (-f ${prepdir}/usr/bin/nomadbsd-update) {
		exec "${prepdir}/usr/bin/nomadbsd-update --skip-fetch --workdir $wrkdir";
	}
}

sub mkbackup {
	my ($lc, @lines);

	if (-f ${backup_file}) {
		warnx(qq(${backup_file} already exists.));
		exit(1)
			if (!yesno(qq(Overwrite it?)));
		print "\n";
	}
	open($fh, '<', $curflist)
		or errx(1, qq(Failed to open $curflist));
	@lines = <$fh>; $lc = 1;
	foreach (@lines) {
		next if (!/MD5\s*\(([^\)]+)\)\s*=\s*(.*)$/);
		chomp($1);
		printf("%d%% ${AB}%s", $lc++ * 100 / @lines,
		    "Backing up $1 ... ${AO}");
		system(qq(tar rf ${backup_file} "/$1" 2>/dev/null)) == 0
			or errx(1, "Failed to back up /$1");
		printf "${AB}${CG}OK${AO}\n";
	}
}

sub rollback {
	my $fh;

	# Remove the files and directories registered by the update
	# in ${filelist}.

	open($fh, '<', $filelist)
		or errx(1, "Failed to open $filelist");
	foreach (<$fh>) {
		# Remove files
		if (-f "/$_") {
			if (yesno("Delete $_?")) {
				unlink("/$_");
			}
			print "\n";
		}
	}
	close($fh);
	# Extract the backup
	system("cd / && tar xPf ${backup_file}");
}

sub mk_oldfile_list {
	my ($fh, $cmd, $newidx, $oldidx, $tmpoldidx, $tmpnewidx);

	$newidx = get_field($tgtrecord, 'flist');
	$oldidx = get_field($currecord, 'flist');

	$tmpoldidx = "$wrkdir/$oldidx.$$";
	$tmpnewidx = "$wrkdir/$newidx.$$";

	$newidx = $wrkdir . '/' . $newidx;
	$oldidx = $wrkdir . '/' . $oldidx;

	$cmd = "sed -E 's/^MD5 \\((.*)\\).*/\\1/' " .
		   "${newidx} | sort -n > ${tmpnewidx}";
	system($cmd) == 0
		or errx(1, "Failed to execute ``$cmd´´");
	$cmd = "sed -E 's/^MD5 \\((.*)\\).*/\\1/' " .
		   "${oldidx} | sort -n > ${tmpoldidx}";
	system($cmd) == 0
		or errx(1, "Failed to execute ``$cmd´´");
	open($fh, '+>', $oldfiles)
		or errx(1, "Failed to open/create $oldfiles");
	foreach (`diff -u ${tmpoldidx} ${tmpnewidx} | grep -E '^-[^-]+'`) {
		print $fh "/$_\n";
	}
	close($fh);
	unlink(${tmpnewidx});
	unlink(${tmpoldidx});
}

sub rm_old_files {
	my ($cmd, $newidx, $oldidx, $tmpoldidx, $tmpnewidx);

	open($fh, '<', $oldfiles)
		or errx(1, "Failed to open/create $oldfiles");
	foreach (<$fh>) {
		if (-f $_) {
			if (yesno("Delete $_?")) {
				unlink("/$_");
			}
			print "\n";
		}
	}
	close($fh);
}

sub get_hunk {
	my ($n, @hunk);
	my ($diff, $hunkno) = @_;

	return () if ($hunkno < 1);
	foreach (@$diff) {
		if (/^@@ -([0-9]+),([0-9]+)/) {
			last if (++$n > $hunkno);
			if ($n == $hunkno) {
				# Set first two elements to hunk start line,
				# and hunk length.
				push @hunk, $1;
				push @hunk, $2;
			}
		} elsif ($n == $hunkno) {
			push @hunk, $_;
		}
	}
	return @hunk;
}

sub split_hunk {
	my ($adds, $dels, $lh, $rh);
	my $llh = shift @_;
	my $lrh = shift @_;
	my @lines = @_;
	
	foreach (@lines) {
		if (/(^ )|(^$)/) {
			chomp if ($_ ne "\n");
			$_ =~ s/^ //;
			if ($adds) {
				$adds = 0;
				push @$llh, "";
				push @$lrh, $rh;
			} elsif ($dels) {
				$dels = 0;
				push @$llh, $lh;
				push @$lrh, "";
			}
			push @$lrh, $_;
			push @$llh, $_;
		} elsif (/^-/) {
			$_ =~ s/^-//;
			chomp if ($_ ne "\n");
			if ($dels) {
				push @$llh, $lh;
				push @$lrh, "";
			} elsif ($adds) {
				push @$llh, $_;
				push @$lrh, $rh;
				$dels = $adds = 0;
			} else {
				$dels = 1;
			}
			$lh = $_;
		} elsif (/^\+/) {
			$_ =~ s/^\+//;
			chomp if ($_ ne "\n");
			if ($adds) {
				push @$llh, "";
				push @$lrh, $rh;
			} elsif ($dels) {
				push @$llh, $lh;
				push @$lrh, $_;
				$dels = $adds = 0;
			} else {
				$adds = 1;
			}
			$rh = $_;
		}
	}
	if ($adds) {
		push @$llh,  "";
		push @$lrh, $rh;
	} elsif ($dels) {
		push @$llh, $lh;
		push @$lrh,  "";
	}
}

sub show_lr {
	my ($maxlen, $rem);
	my ($pointer, $l, $r) = @_;

	$maxlen = int(($ttyw - 9) / 2);
	if ($pointer && ($l ne $r)) {
		$rem = $maxlen + 1;
	} else {
		$rem = $maxlen + 9;
	}
	$sl = shorten_line($l, $maxlen);
	$sr = shorten_line($r, $maxlen);
	$sl = ' ' if ($l eq "\n");
	$sr = ' ' if ($r eq "\n");
	if ($l eq $r || (!$pointer && ($l ne $r))) {
		printf("%-${rem}s %s\n", !$sl ? "~" : $sl,
		    !$sr ? "~" : $sr);
	} else {
		printf("%-${rem}s ${AB}<- ? ->${AO} %s\n",
		    !$sl ? "~" : $sl, !$sr ? "~" : $sr);
	}
}

sub show_splitscreen {
	my ($from, $maxrows, $l, $r) = @_;

	return if (@$l < $from);
	my $p = 0;
	for (my $i = $from; $i < $from + $maxrows && $i < @$l; $i++) {
		if ($$l[$i] ne $$r[$i]) {
			$p++;
		}
		show_lr($p > 1 ? 0 : 1, $$l[$i], $$r[$i]);
	}
}

sub print_mergehdr {
	my ($old, $new) = @_;
	my $rem = int(($ttyw - 9) / 2) + 9;
	my $max = $rem - 9;

	printf("${AB}${CY}%-${rem}s ${CC}%s${AO}\n",
	    shorten_fname($old, $max), shorten_fname($new, $max));
}

sub getkey {
	my $k;

	system("stty -icanon -echo min 1 time 0");
	$k = getc(STDIN);
	system("stty icanon echo");
	return $k;
}

sub moveto {
	system("tput cm $_[0] $_[1]");
}

sub print_hl
{
	my $len = $_[0];
	if (!$UL || `tty` =~ /ttyv[0-9]/) {
		for (my $i = 0; $i < $len; $i++) {
			print "-";
		}
		print "\n";
	} else {
		printf("${UL}%+${len}s${AO}\n", " ");
	}
}

sub print_ul
{
	printf("${UL}${_[0]}${AO}\n");
}

sub errx
{
	print STDERR "${CR}${AB}Error:${AO} ${_[1]}\n";
	exit($_[0]);
}

sub warnx
{
	print STDERR "${CY}${AB}Warning: ${AO}${_[0]}${AO}\n";
}

sub yesno {
	my $k;

	print STDERR "${AB}${CC}$_[0]${AO} (${AB}y${AO}/${AB}n${AO})";
	do {
		$k = getkey();
	} while ($k ne 'y' && $k ne 'n');
	return ($k eq 'y');
}

sub tail {
	my ($fh, $start, @lines);
	my ($fname, $max) = @_;

	open($fh, '<', $fname) or
		errx(1, "Failed to open $fname");
	@lines = <$fh>;
	$start = ($max > @lines) ? 0 : @lines - $max;
	for (my $i = $start; $i < @lines; $i++) {
		print shorten_line($lines[$i], $ttyw);
	}
	for (my $i = @lines; $i < $max; $i++) {
		print "\n";
	}
	close($fh);	
}

sub append_line {
	my ($line, $fname) = @_;

	open($fh, '>>', $fname) or
		errx(1, "Failed to open $fname");
	print $fh $line;
	close($fh);
}

sub append_range {
	my ($inname, $outname, $from, $to) = @_;

	open($in, '<', $inname) or
		errx(1, "Failed to open $inname");
	open($out, '>>', $outname) or
		errx(1, "Failed to open $outname");
	for (my $i = 1; $i <= $to || $to < 0; $i++) {
		last if (!defined($_ = <$in>));
		next if ($i < $from);
		print $out $_;
	}
	close($in);
	close($out);
}

sub merge_menu {
	moveto(0, $ttyh - 3);
	print_hl($ttyw);
	print "<${AB}h${AO}> Use left side  " .
		  "<${AB}l${AO}> Use right side " .
		  "<${AB}c${AO}> Cancel\n";
	for (;;) {
		my $k = getkey();
		return 0 if ($k eq 'h');
		return 1 if ($k eq 'l');
		if ($k eq 'c') {
			return -1 if (yesno("Really cancel?"));
			printf("\r%-${ttyw}s\r", " ");
		}
	}
}

sub postmerge_menu {
	my $out = $_[0];
	$out =~ s/\.merged$//;

	$ENV{PAGER}  = 'less' if (!$ENV{PAGER});
	$ENV{EDITOR} = 'ee'   if (!$ENV{EDITOR});
	
	for (;;) {
		print_ul("${CL}${AB}$_[0]${AO}");
		tail($_[0], $ttyh - 4);
		print_hl($ttyw);
		print "<${AB}s${AO}> Show merged file  "  .
		      "<${AB}e${AO}> Edit merged file  "  .
			  "<${AB}w${AO}> Write merged file  " .
			  "<${AB}c${AO}> Cancel\n";
		my $k = getkey();
		
		if ($k eq "e") {
			system("$ENV{EDITOR} $_[0]")
		} elsif ($k eq "s") {
			system("$ENV{PAGER} $_[0]");
		} elsif ($k eq "w") {
			system("mv $_[0] ${out}") == 0
				or errx(1, "mv $_[0] ${out}");
			return 0;
		} elsif ($k eq "c") {
			return -1 if (yesno("Really cancel?"));
			printf("\r%-${ttyw}s\r", " ");
		}
	}
}

sub merge_files {
	my ($merged, @diff, $hc, $maxrows, $k, $s, @hunk);
	my ($old, $new) = @_;

	$maxrows = ($ttyh - 5) / 2;
	$merged  = ${new} . '.merged';

	@diff = `diff -u ${old} ${new}`;
	for ($hc = $s = 1; (@hunk = get_hunk(\@diff, $hc)); $hc++) {
		my (@lh, @rh);
		my $hs = shift @hunk; # Hunk start
		my $hl = shift @hunk; # Hunk length

		append_range($old, $merged, $s, $hs - 1) if ($s < $hs);
		$s = $hs + $hl;

		split_hunk(\@lh, \@rh, @hunk);
		for (my $i = 0; $i < @lh; $i++) {
			print_ul("${CL}${AB}MERGED FILE - $merged${AO}");
			if (-f ${merged}) {
				tail($merged, $maxrows);
			} else {
				print "\n" x$maxrows;
			}
			print_hl($ttyw);
			print_mergehdr($old, $new);
			show_splitscreen($i, $maxrows, \@lh, \@rh);
			if ($lh[$i] eq $rh[$i]) {
				chomp $lh[$i];
				append_line($lh[$i] . "\n", $merged);
				next;
			}
			my $opt = merge_menu();
			if ($opt == 0 && $lh[$i]) {
				chomp $lh[$i];
				append_line($lh[$i] . "\n", ${merged});
			} elsif ($opt == 1 && $rh[$i]) {
				chomp $rh[$i];
				append_line($rh[$i] . "\n", ${merged});
			} elsif ($opt == -1) {
				return -1;
			}
		}
	}
	append_range($old, $merged, $s, -1);
	return postmerge_menu($merged);
}

sub init {
	my $fh;

	warnx("${version_file} already exists")
		if (-f $version_file);
	open($fh, '+>', $version_file)
		or errx(1, "Failed to create $version_file");
	print $fh "1.0";
	exit(0);
}

sub main_menu {
	my ($old, $new) = @_;

	$ENV{PAGER} = 'less' if (!$ENV{PAGER});
	for (;;) {
		print $CL;
		print "${CL}${AB}${old}${AO} and ${AB}${new}${AO} differ\n";
		moveto(0, $ttyh - 3);
		print_hl($ttyw);
		print "${AB}<k>${AO} Keep old file  " .
			  "${AB}<n>${AO} Use new file  "  .
			  "${AB}<d>${AO} Show diff  "	  .
			  "${AB}<m>${AO} Merge files  ${AB}<q>${AO} Quit\n";
		my $k = getkey();
		if ($k eq 'k') {
			unlink($new);
			return 0;
		} elsif ($k eq 'n') {
			return 0;
		} elsif ($k eq 'd') {
			system(qq(diff -u ${old} ${new} | $ENV{PAGER}));
		} elsif ($k eq 'm') {
			return merge_files($old, $new);
		} elsif ($k eq 'q') {
			return -1 if (yesno("Really cancel?"));
			printf("\r%-${ttyw}s\r", " ");
		}
	}
}

sub usage {
	print "Usage: nomadbsd-update {init|update|remove-old|rollback}\n";
	exit(1);
}

usage() if (@ARGV == 0);
while (@ARGV) {
	$_ = $ARGV[0];
	if ($_ eq 'init') {
		init();
	} elsif ($_ eq 'remove-old') {
		rm_old_files();
		exit(0);
	} elsif ($_ eq 'rollback') {
		rollback();
		exit(0);
	} elsif ($_ eq '--self-invoked') {
		$self_invoked = 1;
	} elsif ($_ eq '--workdir') {
		shift;
		$wrkdir = $ARGV[0];
		usage() if (!$wrkdir || !-d $wrkdir);
	} elsif ($_ ne 'update') {
		usage();
	}
	shift;
}

fetch_index() if (!$self_invoked);

$curversion = get_cur_version();
$tgtversion = get_target_version();

if ($curversion eq $tgtversion) {
	errx(1, "You are already running the most recent version");
}

$currecord = get_version_record($curversion);
$tgtrecord = get_version_record($tgtversion);

if (!$self_invoked) {
	fetch_file($base_url, get_field($tgtrecord, 'flist'));
	fetch_file($base_url, get_field($currecord, 'flist'));
}

$curflist = "$wrkdir/" . get_field($currecord, 'flist');
$tgtflist = "$wrkdir/" . get_field($tgtrecord, 'flist');

if (!$self_invoked) {
	mkbackup();
	mk_oldfile_list();
	fetch_archive(get_field($tgtrecord, 'archive'));
}

open($fh, '<', $curflist)
	or errx(1, "Failed to open $curflist");

foreach (<$fh>) {
	my ($chksum, $fname);

	next if (!/.*\s*\(([^\(]+)\)\s*=\s*([a-zA-Z0-9]+)$/);
	next if (! -f "/$1");
	next if (! -f "$prepdir/$1");
	next if (md5_checksum("/$1") eq $2);
	main_menu("/$1", "$prepdir/$1") == 0
		or exit(1);
}
open(my $fh, '+>', $filelist)
	or errx(1, "Failed to open $filelist: $!");
# Copy the new files to /
foreach (`(cd $prepdir && tar cf - .) | (cd / && tar xPfv - 2>&1)`) {
	print $fh "$1\n" if (/^x (.*)$/);
	print "${AB}Extracting $1${AO}\n";
}
system("chown -R root /etc/*");
system("cap_mkdb /etc/login.conf");

print "Run ``nomadbsd-update remove-old´´ to delete old files.\n";

